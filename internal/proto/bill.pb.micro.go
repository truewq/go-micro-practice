// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: bill.proto

package internal

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Bill service

func NewBillEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Bill service

type BillService interface {
	GetBills(ctx context.Context, in *GetBillsRequest, opts ...client.CallOption) (*GetBillsResponse, error)
}

type billService struct {
	c    client.Client
	name string
}

func NewBillService(name string, c client.Client) BillService {
	return &billService{
		c:    c,
		name: name,
	}
}

func (c *billService) GetBills(ctx context.Context, in *GetBillsRequest, opts ...client.CallOption) (*GetBillsResponse, error) {
	req := c.c.NewRequest(c.name, "Bill.GetBills", in)
	out := new(GetBillsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bill service

type BillHandler interface {
	GetBills(context.Context, *GetBillsRequest, *GetBillsResponse) error
}

func RegisterBillHandler(s server.Server, hdlr BillHandler, opts ...server.HandlerOption) error {
	type bill interface {
		GetBills(ctx context.Context, in *GetBillsRequest, out *GetBillsResponse) error
	}
	type Bill struct {
		bill
	}
	h := &billHandler{hdlr}
	return s.Handle(s.NewHandler(&Bill{h}, opts...))
}

type billHandler struct {
	BillHandler
}

func (h *billHandler) GetBills(ctx context.Context, in *GetBillsRequest, out *GetBillsResponse) error {
	return h.BillHandler.GetBills(ctx, in, out)
}
